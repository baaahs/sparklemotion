package baaahs.ui.slider

import baaahs.app.ui.gadgets.slider.TickProps
import baaahs.ui.xComponent
import react.*

private val Ticks = xComponent<TicksProps>("Ticks") { props ->
    val sliderContext = useContext(sliderContext)
    val scale = sliderContext.scale
    val tickNodes = memo(props.values, scale, props.count, props.tickComponent, props.defaultValue, props.defaultTickComponent) {
        val values = props.values?.toList() ?: run {
            val tickGenerator = props.generator
                ?: { count: Int -> scale.getTicks(count).toList() }
            tickGenerator.invoke(props.count ?: 10)
        }

        buildList {
            addAll(values.map { tick ->
                cloneElement(props.tickComponent) {
                    key = "$$-$tick"
                    this.value = tick
                    this.percent = scale.getValue(tick)
                }
            })

            props.defaultTickComponent?.let { component ->
                props.defaultValue?.let { defaultValue ->
                    add(cloneElement(component) {
                        key = "$$-defaultValue"
                        this.value = defaultValue
                        this.percent = scale.getValue(defaultValue)
                    })
                }
            }
        }
    }

    tickNodes.forEach { +it }
}

external interface TicksProps : Props {
    /**
     * Approximate number of ticks you want to render.
     * If you supply your own ticks using the values prop this prop has no effect.
     */
    var count: Int?
    var generator: ((Int) -> List<Double>)?

    /**
     * The values prop should be an array of unique numbers.
     * Use this prop if you want to specify your own tick values instead of ticks generated by the slider.
     * The numbers should be valid numbers in the domain and correspond to the step value.
     * Invalid values will be coerced to the closet matching value in the domain.
     */
    var values: Array<Double>?

    var defaultValue: Double?

    var tickComponent: ReactElement<TickProps>
    var defaultTickComponent: ReactElement<TickProps>?
}

fun RBuilder.ticks(handler: RHandler<TicksProps>) =
    child(Ticks, handler = handler)
