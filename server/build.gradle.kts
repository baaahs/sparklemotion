import org.gradle.kotlin.dsl.sourceSets

plugins {
    alias(libs.plugins.kotlinJvm)
    application
    alias(libs.plugins.shadow)
}

dependencies {
    implementation(projects.shared)
    implementation(libs.kotlinxCoroutinesCore)
}

val isProductionBuild = project.hasProperty("isProduction")

application {
    mainClass.set("baaahs.sm.server.PinkyMainKt")

    applicationDefaultJvmArgs += "-Djava.library.path=${project(":shared").file("src/jvmMain/jni")}"

    if (!isProductionBuild) {
        applicationDefaultJvmArgs += "-Dio.ktor.development=true"
    }

    if (isMac()) {
        applicationDefaultJvmArgs += listOf(
            "-XstartOnFirstThread", // required for OpenGL: https://github.com/LWJGL/lwjgl3/issues/311
            "-Djava.awt.headless=true" // required for Beat Link; otherwise we get this: https://jogamp.org/bugzilla/show_bug.cgi?id=485
        )
    }
}

tasks.named<JavaExec>("run").configure {
    classpath(tasks.named<Jar>("jar")) // so that the JS artifacts generated by `jvmJar` can be found and served
}

// This task is deprecated, use `run` instead.
tasks.create("runPinkyJvm") {
    dependsOn("run")
}

tasks.create<JavaExec>("runBrainJvm") {
    dependsOn("compileJava")
    mainClass.set("baaahs.sm.brain.sim.BrainMainKt")

    val jvmMain = sourceSets["main"]
    classpath = files(jvmMain.output) + jvmMain.runtimeClasspath
}

tasks.create<JavaExec>("runBridgeJvm") {
    dependsOn("compileJava")
    mainClass.set("baaahs.sm.bridge.SimulatorBridgeKt")

    val jvmMain = sourceSets["main"]
    classpath = files(jvmMain.output) + jvmMain.runtimeClasspath
}
