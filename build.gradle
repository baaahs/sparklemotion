plugins {
    id 'kotlin-multiplatform' version '1.3.21'
}

repositories {
    mavenCentral()
}
group 'org.baaahs'
version '0.0.1'

apply plugin: 'maven-publish'

kotlin {
    jvm()
    js()
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
//    linuxX64("linux")
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.1.1'
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-js:1.1.1'
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }

//        linuxMain {
//        }
//        linuxTest {
//        }
    }
}

compileKotlinJs {
    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"
}

jsProcessResources { t ->
    t.from('build/webpack')
    t.from('build/classes/kotlin/js/main')
}

task serve << {
    SimpleHttpFileServerFactory factory = new SimpleHttpFileServerFactory()
    HttpFileServer server = factory.start(new File("build/processedResources/js/main"), 8001)
    println("Server Started on http://localhost:${server.port}/index.html ctrc+c to kill it")
    java.lang.Thread.sleep(Long.MAX_VALUE);
}

//task assembleWeb(type: Sync) {
//    configurations.each { Configuration c ->
//        println(c)
//        if (c.isCanBeResolved()) {
//            c.each { File file ->
//                println "file = $file"
//                from(zipTree(file.absolutePath), {
//                    includeEmptyDirs = false
//                    include { fileTreeElement ->
//                        println "fileTreeElement = $fileTreeElement"
//                        def path = fileTreeElement.path
//                        path.endsWith(".js") && (path.startsWith("META-INF/resources/") ||
//                                !path.startsWith("META-INF/"))
//                    }
//                })
//            }
//        }
//    }
//    from compileKotlin2Js.destinationDir
//    into "${projectDir}/web"
//
//    dependsOn classes
//}
//
//assemble.dependsOn assembleWeb