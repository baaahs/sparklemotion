buildscript {
    ext.kotlin_version = '1.3.50'
    ext.coroutines_version = '1.3.1'
    ext.dokka_version = '0.9.18'
    ext.ktor_version = '1.1.5'
    ext.logback_version = '1.2.1'
    ext.serialization_version = '1.3.50'
    ext.serialization_runtime_version = '0.12.0'
    ext.klockVersion = "1.5.0"
    ext.lwjglVersion = "3.2.2"
    ext.mockk_version = '1.9.3'
    ext.beatlink_version = '0.5.1'

    repositories {
        jcenter()
        maven { url "https://kotlin.bintray.com/kotlinx" }
        maven { url "https://plugins.gradle.org/m2/" }
//        maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
        maven { url "https://dl.bintray.com/salomonbrys/gradle-plugins" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:$dokka_version"
        classpath "com.github.salomonbrys.gradle.kotlin.js:kotlin-js-gradle-utils:1.2.0"
        classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0'
    }
}

import org.gradle.internal.os.OperatingSystem
switch (OperatingSystem.current()) {
    case OperatingSystem.LINUX:
        project.ext.lwjglNatives = "natives-linux"
        break
    case OperatingSystem.MAC_OS:
        project.ext.lwjglNatives = "natives-macos"
        break
}

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "kotlin-multiplatform"
apply plugin: "kotlinx-serialization"
apply plugin: "org.jetbrains.dokka"
apply plugin: "com.github.salomonbrys.gradle.kotlin.js.mpp-assemble-web"


import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar


repositories {
    jcenter()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url 'https://kotlin.bintray.com/ktor' }
    maven { url "https://kotlin.bintray.com/kotlin-js-wrappers" }
//    maven { url "https://dl.bintray.com/kotlin/kotlin-eap" }
//    maven { url "https://dl.bintray.com/kotlin/kotlin-dev" }
    maven { url 'https://jitpack.io' }
}

group 'org.baaahs'
version '0.0.1'

apply plugin: 'maven-publish'

kotlin {
    jvm()
    js() {
        compilations.main.compileKotlinTask.kotlinOptions.moduleKind = "umd"
    }

    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
//    linuxX64("linux")

    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serialization_runtime_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serialization_runtime_version"
                implementation "com.soywiz.korlibs.klock:klock:$klockVersion"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
                implementation "io.ktor:ktor-server-core:$ktor_version"
                implementation "io.ktor:ktor-server-netty:$ktor_version"
                implementation "io.ktor:ktor-server-host-common:$ktor_version"
                implementation "io.ktor:ktor-websockets:$ktor_version"
                implementation "ch.qos.logback:logback-classic:$logback_version"
                implementation "org.deepsymmetry:beat-link:$beatlink_version"

                implementation files("src/jvmMain/lib/ftd2xxj-2.1.jar")
                implementation files("src/jvmMain/lib/javax.util.property-2_0.jar") // required by ftd2xxj

                implementation "org.joml:joml:1.9.16"

                // GLSL support via LWJGL:
                implementation "org.lwjgl:lwjgl:$lwjglVersion"
                implementation "org.lwjgl:lwjgl-assimp:$lwjglVersion"
                implementation "org.lwjgl:lwjgl-glfw:$lwjglVersion"
                implementation "org.lwjgl:lwjgl-jawt:$lwjglVersion"
                implementation "org.lwjgl:lwjgl-openal:$lwjglVersion"
                implementation "org.lwjgl:lwjgl-opengl:$lwjglVersion"
                implementation "org.lwjgl:lwjgl-stb:$lwjglVersion"
                runtimeOnly "org.lwjgl:lwjgl:$lwjglVersion:$lwjglNatives"
                runtimeOnly "org.lwjgl:lwjgl-assimp:$lwjglVersion:$lwjglNatives"
                runtimeOnly "org.lwjgl:lwjgl-glfw:$lwjglVersion:$lwjglNatives"
                runtimeOnly "org.lwjgl:lwjgl-openal:$lwjglVersion:$lwjglNatives"
                runtimeOnly "org.lwjgl:lwjgl-opengl:$lwjglVersion:$lwjglNatives"
                runtimeOnly "org.lwjgl:lwjgl-stb:$lwjglVersion:$lwjglNatives"
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutines_version"
                implementation "io.mockk:mockk:$mockk_version"
            }
        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-js:$coroutines_version"
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:$serialization_runtime_version"
                implementation "org.jetbrains.kotlinx:kotlinx-html-js:0.6.12"
                implementation 'com.github.markaren:three.kt:v0.88-ALPHA-7'
                implementation 'org.jetbrains:kotlin-react:16.6.0-pre.70-kotlin-1.3.21'
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }

        sourceSets.all {
            languageSettings {
                progressiveMode = true
                useExperimentalAnnotation('kotlin.ExperimentalStdlibApi')
            }
        }

//        linuxMain {
//        }
//        linuxTest {
//        }
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-24463:
compileKotlinJvm {
    dependsOn ":copySheepModel"
}

task copySheepModel(type: Copy) {
    from('src/commonMain/resources')
    into 'build/classes/kotlin/jvm/main'
}

compileKotlinJs {
    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"
}

compileKotlinJvm {
    kotlinOptions.jvmTarget = "1.8"
}

compileTestKotlinJvm {
    kotlinOptions.jvmTarget = "1.8"
}

assembleWeb {
    targets {
        create("js") {
            outputDir = "build/web/kotlin"
        }
    }
}

jsProcessResources { t ->
    dependsOn "jsAssembleWeb"

    t.from('build/web/kotlin')
    t.from('node_modules/three/build') { include 'three.js' }

    doLast {
        createResourceFilesList(new File(buildDir, "processedResources/js/main"))
    }
}

jvmProcessResources {
    doLast {
        createResourceFilesList(new File(buildDir, "processedResources/jvm/main"))
    }
}

private static void createResourceFilesList(File baseDir) {
    def list = []
    baseDir.eachFileRecurse(groovy.io.FileType.FILES) { file ->
        def path = baseDir.relativePath(file)
        if (path != "_RESOURCE_FILES_") {
            list << path
        }
    }
    new File(baseDir, "_RESOURCE_FILES_").text = list.sort().join("\n")
}

task installReactUImodules(type: Exec) {
    commandLine "npm", "install"
}

task buildReactUI(type: Exec) {
    inputs.file("package-lock.json").withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file("webpack.config.js").withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.dir("src/jsMain/js").withPathSensitivity(PathSensitivity.RELATIVE)

    outputs.dir("$buildDir/webpack")
    outputs.cacheIf { true }

    commandLine "$projectDir/node_modules/.bin/webpack-cli", "--config", "$projectDir/webpack.config.js", "--mode", "development", "--color"
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"

    // default config apparently not compatible with kotlin-multiplatform :-(
    kotlinTasks { [] }
    sourceDirs = files('src/commonMain/kotlin') + files('src/jsMain/kotlin') + files('src/jvmMain/kotlin')
}

task runPinkyJvm(type: JavaExec) {
    dependsOn assemble
    dependsOn buildReactUI
    main = 'baaahs.PinkyMainKt'

    systemProperties["java.library.path"] = file("src/jvmMain/jni")
    classpath = files(kotlin.targets.jvm.compilations.main.output) + kotlin.targets.jvm.compilations.main.runtimeDependencyFiles
    args projectDir
    jvmArgs "-XstartOnFirstThread" // required for OpenGL: https://github.com/LWJGL/lwjgl3/issues/311
}

task runBrainJvm(type: JavaExec) {
    dependsOn assemble
    main = 'baaahs.BrainMainKt'

    classpath = files(kotlin.targets.jvm.compilations.main.output) + kotlin.targets.jvm.compilations.main.runtimeDependencyFiles
    args projectDir
}

task packageClientResources(type: Copy, dependsOn: [jsProcessResources, buildReactUI]) {
    from project.file("build/processedResources/js/main")
    into "build/classes/kotlin/jvm/main/htdocs"
}

jvmJar {
    dependsOn "packageClientResources"
}

task shadowJar(type: ShadowJar, dependsOn: [jvmJar]) {
    from jvmJar.archiveFile
    configurations = [project.configurations.jvmRuntimeClasspath]
    manifest {
        attributes 'Main-Class': 'baaahs.PinkyMainKt'
    }
}