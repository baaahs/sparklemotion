buildscript {
    ext.kotlin_version = '1.3.30'
    repositories {
        jcenter()
        maven { url "https://kotlin.bintray.com/kotlinx" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
    }
}

apply plugin: "kotlin-multiplatform"
apply plugin: "kotlinx-serialization"

repositories {
    jcenter()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url 'https://jitpack.io' }
}

group 'org.baaahs'
version '0.0.1'

apply plugin: 'maven-publish'

kotlin {
    jvm()
    js()
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
//    linuxX64("linux")
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.1.1'
                implementation 'org.jetbrains.kotlin:kotlin-serialization:1.3.21'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:0.10.0"
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }

        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1'
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-common:1.1.1'
            }
        }

        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-js:1.1.1'
                implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-js:0.10.0"
                implementation 'org.jetbrains.kotlinx:kotlinx-html-js:0.6.12'
                implementation 'com.github.markaren:three.kt:v0.88-ALPHA-7'
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }

//        linuxMain {
//        }
//        linuxTest {
//        }
    }
}

compileKotlinJs {
    kotlinOptions.sourceMap = true
    kotlinOptions.sourceMapEmbedSources = "always"
}

jsProcessResources { t ->
    t.dependsOn(":buildReactUI")

    t.from('build/webpack')
    t.from('build/classes/kotlin/js/main')
}

task serve {
    dependsOn(":jsJar")

    doLast {
        SimpleHttpFileServerFactory factory = new SimpleHttpFileServerFactory()
        HttpFileServer server = factory.start(new File("build/processedResources/js/main"), 8001)
        println("Server Started on http://localhost:${server.port}/index.html ctrc+c to kill it")
        java.lang.Thread.sleep(Long.MAX_VALUE);
    }
}

task installReactUImodules(type: Exec) {
    commandLine "npm", "install"
}

task buildReactUI(type: Exec) {
    inputs.file("package-lock.json").withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.file("webpack.config.js").withPathSensitivity(PathSensitivity.RELATIVE)
    inputs.dir("src/jsMain/js").withPathSensitivity(PathSensitivity.RELATIVE)

    outputs.dir("$buildDir/webpack")
    outputs.cacheIf { true }

    commandLine "$projectDir/node_modules/.bin/webpack-cli", "--config", "$projectDir/webpack.config.js", "--mode", "development", "--color"
}
