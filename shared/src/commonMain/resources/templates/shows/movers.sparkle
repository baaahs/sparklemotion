{
  "title": "Sample Show",
  "patches": [
    {
      "shaderInstanceIds": [
        "xyProjection-inst",
        "darkness-inst",
        "brightness-inst",
        "saturation-inst",
        "defaultMover-inst"
      ],
      "surfaces": {
        "name": "All Surfaces"
      }
    }
  ],
  "controlLayout": {
    "Scenes": [
      "scenesButtonGroup"
    ],
    "More Controls": [
      "colorColorPickerControl",
      "brightnessSliderControl",
      "saturationSliderControl"
    ],
    "Effects": [
      "RippleButton"
    ],
    "Transition": [
      "newButtonButton"
    ]
  },
  "layouts": {
    "panelNames": [
      "Scenes",
      "Backdrops",
      "More Controls",
      "Preview",
      "Effects",
      "Transition"
    ],
    "map": {
      "default": {
        "rootNode": {
          "direction": "row",
          "splitPercentage": 70,
          "first": {
            "direction": "column",
            "splitPercentage": 20,
            "first": "Scenes",
            "second": {
              "direction": "column",
              "splitPercentage": 60,
              "first": "Backdrops",
              "second": "More Controls"
            }
          },
          "second": {
            "direction": "column",
            "splitPercentage": 20,
            "first": "Preview",
            "second": {
              "direction": "column",
              "splitPercentage": 60,
              "first": "Effects",
              "second": "Transition"
            }
          }
        }
      }
    }
  },
  "shaders": {
    "xyProjection": {
      "title": "XY Projection",
      "src": "// XY Projection\n\nstruct ModelInfo {\n    vec3 center;\n    vec3 extents;\n};\nuniform ModelInfo modelInfo;\n\n// @return uv-coordinate\n// @param pixelLocation xyz-coordinate\nvec2 main(vec3 pixelLocation) {\n    vec3 pixelOffset = (pixelLocation - modelInfo.center) / modelInfo.extents + .5;\n    return vec2(1.-pixelOffset.x, pixelOffset.y);\n}"
    },
    "darkness": {
      "title": "Darkness",
      "src": "void main(void) {\n    gl_FragColor = vec4(0., 0., 0., 1.);\n}"
    },
    "brightness": {
      "title": "Brightness",
      "src": "uniform float brightness; // @@Slider min=0 max=1.25 default=1\n\n// @return color\n// @param inColor color\nvec4 main(vec4 inColor) {\n    vec4 clampedColor = clamp(inColor, 0., 1.);\n    return vec4(clampedColor.rgb * brightness, clampedColor.a);\n}"
    },
    "saturation": {
      "title": "Saturation",
      "src": "uniform float saturation; // @@Slider min=0 max=1.25 default=1\n\n// All components are in the range [0…1], including hue.\nvec3 rgb2hsv(vec3 c)\n{\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n\n    float d = q.x - min(q.w, q.y);\n    float e = 1.0e-10;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n \n\n// All components are in the range [0…1], including hue.\nvec3 hsv2rgb(vec3 c)\n{\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n}\n\n// @return color\n// @param inColor color\nvec4 main(vec4 inColor) {\n    if (saturation == 1.) return inColor;\n\n    vec4 clampedColor = clamp(inColor, 0., 1.);\n    vec3 hsv = rgb2hsv(clampedColor.rgb);\n    hsv.y *= saturation;\n    return vec4(hsv2rgb(hsv), clampedColor.a);\n}"
    },
    "defaultMover": {
      "title": "Default Mover",
      "src": "struct MovingHeadParams {\n    float pan;\n    float tilt;\n    float colorWheel;\n    float dimmer;\n};\n\nuniform float time;\nuniform float intensity; // @type float\nuniform float adjust; // @type float\n\n// @param params moving-head-params\nvoid main(out MovingHeadParams params) {\n    params.pan = adjust;\n    params.tilt = adjust;\n    params.colorWheel = mod(time / 20., 1.);\n    params.dimmer = intensity * .5;\n}"
    },
    "glslHueTestPattern": {
      "title": "GLSL Hue Test Pattern",
      "src": "uniform vec2 resolution;\nvoid main(void) {\n    gl_FragColor = vec4(gl_FragCoord.xy / resolution, 0.0, 1.0);\n}"
    },
    "fireBall": {
      "title": "Fire Ball",
      "src": "// Fire Ball\n// From http://glslsandbox.com/e#61108.0\n\n// Fire ball by David Robles\n\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\n//#extension GL_OES_standard_derivatives : enable\n#ifdef GL_ES\nprecision mediump float;\n#endif\n\nuniform float time;\nuniform vec2 resolution;\n\nconst float PI = 3.141592;\n\nvec2 hash( vec2 p ) // replace this by something better\n{\n    p = vec2( dot(p,vec2(127.1,311.7)), dot(p,vec2(269.5,183.3)) );\n    return -1.0 + 2.0*fract(sin(p)*43758.5453123);\n}\n\nfloat noise( in vec2 p )\n{\n    const float K1 = 0.366025404; // (sqrt(3)-1)/2;\n    const float K2 = 0.211324865; // (3-sqrt(3))/6;\n\n    vec2  i = floor( p + (p.x+p.y)*K1 );\n    vec2  a = p - i + (i.x+i.y)*K2;\n    float m = step(a.y,a.x);\n    vec2  o = vec2(m,1.0-m);\n    vec2  b = a - o + K2;\n    vec2  c = a - 1.0 + 2.0*K2;\n    vec3  h = max( 0.5-vec3(dot(a,a), dot(b,b), dot(c,c) ), 0.0 );\n    vec3  n = h*h*h*h*vec3( dot(a,hash(i+0.0)), dot(b,hash(i+o)), dot(c,hash(i+1.0)));\n    return dot( n, vec3(70.0) );\n}\n\nfloat circleShape(vec2 coord, vec2 pos){\n    float dist = distance(coord, pos);\n    return clamp(   log(dist*(15.+4.*noise(vec2(time*.8))))  ,0.,1.);\n}\n\nvec2 sineWave(vec2 p){\n    float Ax = .05;\n    float wx = 1.50 * PI;\n    float x = sin(wx * p.x) * Ax * sin(noise(vec2(time)));\n\n    float Ay = .05;\n    float wy = PI * 10.;\n    float y = sin(wy*p.y) * Ay * noise(vec2(time));\n\n    return vec2(p.x + x, p.y + y);\n}\n\nvoid main( void ) {\n\n    vec2 pos = gl_FragCoord.xy / resolution.xy;\n    vec2 uv = pos;\n\n    uv += vec2(-.5, -.5);\n    uv *= vec2(2.3, 1.3);\n\n    float luz = clamp(1.05 - (pow(uv.x, 2.) + pow(uv.y * 1.6, 6.))*2., 0., 1.);\n    //vec3 color = vec3(0.3059, 0.1922, 0.0431);\n    vec3 color = vec3(0.7333, 0.2902, 0.0314);\n    //vec3 color = vec3(0.3882, 0.1686, 0.251);\n    float grad = circleShape(sineWave(pos), vec2(.5, .32));\n\n    float ruido = 0.;\n\n    pos *= 5.0;\n    float xoff = 1.05;\n    float yoff = 2.1;\n    mat2 m = mat2( 1.6,  1.2, -1.2,  1.6 );\n    ruido = 0.7500*noise(vec2(abs(pos.x-time*xoff), abs(pos.y-time*yoff))); pos = m*pos;\n    ruido += 0.2500*noise(vec2(abs(pos.x-time*xoff), abs(pos.y-time*yoff))); pos = m*pos;\n    ruido += 0.5000*noise(vec2(abs(pos.x-time*xoff), abs(pos.y-time*yoff))); pos = m*pos;\n    ruido += 0.1250*noise(vec2(abs(pos.x-time*xoff), abs(pos.y-time*yoff))); pos = m*pos;\n\n\n    ruido = 0.5 + 0.5*ruido;\n    ruido = clamp(ruido, 0., 1.);\n\n    /////////////////////////////////////////////////////////////\n    pos = uv;\n    pos *= 3.0;\n    float ruido2 = 0.;\n    xoff = 1.5;\n    yoff = 1.5;\n    m = mat2( -2.1,  .5, -.5,  2.1 );\n    ruido2 = 0.2500*noise(vec2(abs(pos.x-time*xoff), abs(pos.y-time*yoff))); pos = m*pos;\n    ruido2 += 0.5000*noise(vec2(abs(pos.x-time*xoff), abs(pos.y-time*yoff))); pos = m*pos;\n    ruido2 += 0.1250*noise(vec2(abs(pos.x-time*xoff), abs(pos.y-time*yoff))); pos = m*pos;\n    ruido2 += 0.0625*noise(vec2(abs(pos.x-time*xoff), abs(pos.y-time*yoff))); pos = m*pos;\n\n    ruido2 = 0.5 + 0.5*ruido2;\n    ruido2 = clamp(ruido2, 0., 1.);\n\n    float f = 0.;\n    f += 1.0 - ( (1.0-luz) / (ruido2 + 0.001) );\n    f /= grad;\n    f /= ruido;\n\n    gl_FragColor = vec4(f*color*luz*(.5-.5*noise(vec2(time*.8))), 1.);\n    //gl_FragColor = vec4(color/grad, 1.);\n\n}"
    },
    "checkerboard": {
      "title": "Checkerboard",
      "src": "uniform float checkerboardSize = 10.0; // @@Slider min=.001 max=1 default=.1\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 pos = floor(fragCoord / checkerboardSize);\n    vec3 patternMask = vec3(mod(pos.x + mod(pos.y, 2.0), 2.0));\n    fragColor = vec4(patternMask.xyz, 1.);\n}"
    },
    "anotherGlslHueTestPattern": {
      "title": "Another GLSL Hue Test Pattern",
      "src": "uniform vec2 resolution;\nuniform float redness;\nvoid main(void) {\n    gl_FragColor = vec4(redness, gl_FragCoord.xy / resolution, 1.0);\n}"
    },
    "ripple": {
      "title": "Ripple",
      "src": "uniform float time;\nuniform float rippleAmount; // @type float\n\n// @return uv-coordinate\n// @param uvIn uv-coordinate\nvec2 main(vec2 uvIn) {\n  vec2 p = -1.0 + 2.0 * uvIn;\n  float len = length(p);\n  return uvIn + (p/len)*sin(len*12.0-time*4.0)*0.1 * rippleAmount;\n}"
    },
    "untitledMoverShader": {
      "title": "Untitled Mover Shader",
      "src": "struct MovingHeadParams {\n    float pan;\n    float tilt;\n    float colorWheel;\n    float dimmer;\n};\n\nuniform float time;\nuniform float adjust; // @type float\n\n// @param params moving-head-params\nvoid main(out MovingHeadParams params) {\n    params.pan = sin(time / 2.) / 2. + .5 + adjust;\n    params.tilt = sin(time * 2.) / 2. + .5;\n    params.colorWheel = sin(time) / 2. + .5;\n    params.dimmer = .125;\n}"
    }
  },
  "shaderInstances": {
    "xyProjection-inst": {
      "shaderId": "xyProjection",
      "incomingLinks": {
        "modelInfo": {
          "type": "datasource",
          "dataSourceId": "modelInfo"
        },
        "pixelLocation": {
          "type": "datasource",
          "dataSourceId": "pixelLocation"
        }
      }
    },
    "darkness-inst": {
      "shaderId": "darkness",
      "incomingLinks": {}
    },
    "brightness-inst": {
      "shaderId": "brightness",
      "incomingLinks": {
        "brightness": {
          "type": "datasource",
          "dataSourceId": "brightnessSlider"
        },
        "inColor": {
          "type": "shader-channel",
          "shaderChannel": "main"
        }
      }
    },
    "saturation-inst": {
      "shaderId": "saturation",
      "incomingLinks": {
        "inColor": {
          "type": "shader-channel",
          "shaderChannel": "main"
        },
        "saturation": {
          "type": "datasource",
          "dataSourceId": "saturationSlider"
        }
      }
    },
    "defaultMover-inst": {
      "shaderId": "defaultMover",
      "incomingLinks": {
        "time": {
          "type": "datasource",
          "dataSourceId": "time"
        },
        "intensity": {
          "type": "datasource",
          "dataSourceId": "intensitySlider"
        },
        "adjust": {
          "type": "datasource",
          "dataSourceId": "adjustSlider"
        }
      }
    },
    "glslHueTestPattern-inst": {
      "shaderId": "glslHueTestPattern",
      "incomingLinks": {
        "gl_FragCoord": {
          "type": "shader-channel",
          "shaderChannel": "main"
        },
        "resolution": {
          "type": "datasource",
          "dataSourceId": "resolution"
        }
      }
    },
    "fireBall-inst": {
      "shaderId": "fireBall",
      "incomingLinks": {
        "time": {
          "type": "datasource",
          "dataSourceId": "time"
        },
        "gl_FragCoord": {
          "type": "shader-channel",
          "shaderChannel": "main"
        },
        "resolution": {
          "type": "datasource",
          "dataSourceId": "resolution"
        }
      }
    },
    "checkerboard-inst": {
      "shaderId": "checkerboard",
      "incomingLinks": {
        "fragCoord": {
          "type": "shader-channel",
          "shaderChannel": "main"
        },
        "checkerboardSize": {
          "type": "datasource",
          "dataSourceId": "checkerboardSizeSlider"
        }
      }
    },
    "anotherGlslHueTestPattern-inst": {
      "shaderId": "anotherGlslHueTestPattern",
      "incomingLinks": {
        "gl_FragCoord": {
          "type": "shader-channel",
          "shaderChannel": "main"
        },
        "redness": {
          "type": "datasource",
          "dataSourceId": "rednessSlider"
        },
        "resolution": {
          "type": "datasource",
          "dataSourceId": "resolution"
        }
      }
    },
    "ripple-inst": {
      "shaderId": "ripple",
      "incomingLinks": {
        "time": {
          "type": "datasource",
          "dataSourceId": "time"
        },
        "uvIn": {
          "type": "shader-channel",
          "shaderChannel": "main"
        },
        "rippleAmount": {
          "type": "datasource",
          "dataSourceId": "rippleAmountSlider"
        }
      }
    },
    "untitledMoverShader-inst": {
      "shaderId": "untitledMoverShader",
      "incomingLinks": {
        "time": {
          "type": "datasource",
          "dataSourceId": "time"
        },
        "adjust": {
          "type": "datasource",
          "dataSourceId": "adjustSlider"
        }
      }
    }
  },
  "controls": {
    "redYellowGreenButton": {
      "type": "baaahs.Core:Button",
      "title": "Red Yellow Green",
      "patches": [
        {
          "shaderInstanceIds": [
            "glslHueTestPattern-inst"
          ],
          "surfaces": {
            "name": "All Surfaces"
          }
        }
      ],
      "controlLayout": {
        "More Controls": []
      }
    },
    "intensitySliderControl": {
      "type": "baaahs.Core:Gadget",
      "gadget": {
        "type": "baaahs.Core:Slider",
        "title": "Intensity"
      },
      "controlledDataSourceId": "intensitySlider"
    },
    "fireButton": {
      "type": "baaahs.Core:Button",
      "title": "Fire",
      "patches": [
        {
          "shaderInstanceIds": [
            "fireBall-inst"
          ],
          "surfaces": {
            "name": "All Surfaces"
          }
        }
      ],
      "controlLayout": {
        "Backdrops": [
          "intensitySliderControl"
        ]
      }
    },
    "checkerboardSizeSliderControl": {
      "type": "baaahs.Core:Gadget",
      "gadget": {
        "type": "baaahs.Core:Slider",
        "title": "Checkerboard Size",
        "initialValue": 0.1,
        "minValue": 0.001
      },
      "controlledDataSourceId": "checkerboardSizeSlider"
    },
    "checkerboardButton": {
      "type": "baaahs.Core:Button",
      "title": "Checkerboard",
      "patches": [
        {
          "shaderInstanceIds": [
            "checkerboard-inst"
          ],
          "surfaces": {
            "name": "All Surfaces"
          }
        }
      ],
      "controlLayout": {
        "Backdrops": [
          "checkerboardSizeSliderControl"
        ]
      }
    },
    "backdropsButtonGroup": {
      "type": "baaahs.Core:ButtonGroup",
      "title": "Backdrops",
      "direction": "Vertical",
      "buttonIds": [
        "redYellowGreenButton",
        "fireButton",
        "checkerboardButton"
      ]
    },
    "dimmerSliderControl": {
      "type": "baaahs.Core:Gadget",
      "gadget": {
        "type": "baaahs.Core:Slider",
        "title": "Dimmer"
      },
      "controlledDataSourceId": "dimmerSlider"
    },
    "adjustSliderControl": {
      "type": "baaahs.Core:Gadget",
      "gadget": {
        "type": "baaahs.Core:Slider",
        "title": "Adjust"
      },
      "controlledDataSourceId": "adjustSlider"
    },
    "pleistoceneButton": {
      "type": "baaahs.Core:Button",
      "title": "Pleistocene",
      "controlLayout": {
        "Backdrops": [
          "backdropsButtonGroup"
        ],
        "More Controls": [
          "dimmerSliderControl",
          "adjustSliderControl",
          "intensitySliderControl"
        ]
      }
    },
    "blueAquaGreenButton": {
      "type": "baaahs.Core:Button",
      "title": "Blue Aqua Green",
      "patches": [
        {
          "shaderInstanceIds": [
            "anotherGlslHueTestPattern-inst"
          ],
          "surfaces": {
            "name": "All Surfaces"
          }
        }
      ]
    },
    "backdropsButtonGroup2": {
      "type": "baaahs.Core:ButtonGroup",
      "title": "Backdrops",
      "direction": "Vertical",
      "buttonIds": [
        "blueAquaGreenButton"
      ]
    },
    "holoceneButton": {
      "type": "baaahs.Core:Button",
      "title": "Holocene",
      "controlLayout": {
        "Backdrops": [
          "backdropsButtonGroup2"
        ]
      }
    },
    "scenesButtonGroup": {
      "type": "baaahs.Core:ButtonGroup",
      "title": "Scenes",
      "direction": "Horizontal",
      "buttonIds": [
        "pleistoceneButton",
        "holoceneButton"
      ]
    },
    "colorColorPickerControl": {
      "type": "baaahs.Core:Gadget",
      "gadget": {
        "type": "baaahs.Core:ColorPicker",
        "title": "Color"
      },
      "controlledDataSourceId": "colorColorPicker"
    },
    "brightnessSliderControl": {
      "type": "baaahs.Core:Gadget",
      "gadget": {
        "type": "baaahs.Core:Slider",
        "title": "Brightness",
        "maxValue": 1.25
      },
      "controlledDataSourceId": "brightnessSlider"
    },
    "saturationSliderControl": {
      "type": "baaahs.Core:Gadget",
      "gadget": {
        "type": "baaahs.Core:Slider",
        "title": "Saturation",
        "maxValue": 1.25
      },
      "controlledDataSourceId": "saturationSlider"
    },
    "RippleButton": {
      "type": "baaahs.Core:Button",
      "title": "Ripple",
      "patches": [
        {
          "shaderInstanceIds": [
            "ripple-inst"
          ],
          "surfaces": {
            "name": "All Surfaces"
          }
        }
      ]
    },
    "newButtonButton": {
      "type": "baaahs.Core:Button",
      "title": "New Button",
      "patches": [
        {
          "shaderInstanceIds": [
            "untitledMoverShader-inst"
          ],
          "surfaces": {
            "name": "All Surfaces"
          }
        }
      ]
    }
  },
  "dataSources": {
    "modelInfo": {
      "type": "baaahs.Core:ModelInfo"
    },
    "pixelLocation": {
      "type": "baaahs.Core:PixelLocation"
    },
    "brightnessSlider": {
      "type": "baaahs.Core:Slider",
      "title": "Brightness",
      "initialValue": 1.0,
      "minValue": 0.0,
      "maxValue": 1.25
    },
    "saturationSlider": {
      "type": "baaahs.Core:Slider",
      "title": "Saturation",
      "initialValue": 1.0,
      "minValue": 0.0,
      "maxValue": 1.25
    },
    "time": {
      "type": "baaahs.Core:Time"
    },
    "intensitySlider": {
      "type": "baaahs.Core:Slider",
      "title": "Intensity",
      "initialValue": 1.0,
      "minValue": 0.0,
      "maxValue": 1.0
    },
    "adjustSlider": {
      "type": "baaahs.Core:Slider",
      "title": "Adjust",
      "initialValue": 1.0,
      "minValue": 0.0,
      "maxValue": 1.0
    },
    "resolution": {
      "type": "baaahs.Core:Resolution"
    },
    "checkerboardSizeSlider": {
      "type": "baaahs.Core:Slider",
      "title": "Checkerboard Size",
      "initialValue": 0.1,
      "minValue": 0.001,
      "maxValue": 1.0
    },
    "dimmerSlider": {
      "type": "baaahs.Core:Slider",
      "title": "Dimmer",
      "initialValue": 1.0,
      "minValue": 0.0,
      "maxValue": 1.0
    },
    "rednessSlider": {
      "type": "baaahs.Core:Slider",
      "title": "Redness",
      "initialValue": 1.0,
      "minValue": 0.0,
      "maxValue": 1.0
    },
    "colorColorPicker": {
      "type": "baaahs.Core:ColorPicker",
      "title": "Color",
      "initialValue": -1
    },
    "rippleAmountSlider": {
      "type": "baaahs.Core:Slider",
      "title": "Ripple Amount",
      "initialValue": 1.0,
      "minValue": 0.0,
      "maxValue": 1.0
    }
  },
  "version": 2
}